<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pedro Nofuentes]]></title>
  <link href="http://pedro.nofuent.es/atom.xml" rel="self"/>
  <link href="http://pedro.nofuent.es/"/>
  <updated>2014-07-01T23:15:28+02:00</updated>
  <id>http://pedro.nofuent.es/</id>
  <author>
    <name><![CDATA[Pedro Nofuentes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging console with XDebug in a remote server]]></title>
    <link href="http://pedro.nofuent.es/blog/2014/07/01/debugging-console-with-xdebug-in-a-remote-server/"/>
    <updated>2014-07-01T20:45:05+02:00</updated>
    <id>http://pedro.nofuent.es/blog/2014/07/01/debugging-console-with-xdebug-in-a-remote-server</id>
    <content type="html"><![CDATA[<p>These days I&rsquo;ve been coding some commands to handle a newsletter with a work queue, so I needed the XDebug&rsquo;s benefits to debug the commands. In a previous post I published the <a href="http://pedro.nofuent.es/blog/2013/10/11/un-vistazo-a-xdebug/">talk I did in Symfony VLC about the goodies of XDebug</a>, but it lacked a part about debugging php scripts.</p>

<p>I usually use a dev server with Vagrant and provisioned with Puppet as dev environment. To get the basic configuration of the box I use <a href="http://www.puphpet.com">Puphpet</a>. Then I will explain what I did to use XDebug in this environment, that it&rsquo;s pretty straight forward:</p>

<ol>
<li>Configure XDebug to enable the profiler</li>
<li>Configure console&rsquo;s environment</li>
<li>Debug!</li>
</ol>


<!-- more -->


<h2>XDebug</h2>

<p>The base configuration that provides Puphet normally it&rsquo;s like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xdebug.default_enable<span class="o">=</span>1
</span><span class='line'>xdebug.remote_autostart<span class="o">=</span>0
</span><span class='line'>xdebug.remote_connect_back<span class="o">=</span>0
</span><span class='line'>xdebug.remote_enable<span class="o">=</span>1
</span><span class='line'>xdebug.remote_handler<span class="o">=</span>dbgp
</span><span class='line'>xdebug.remote_port<span class="o">=</span><span class="s2">&quot;9000&quot;</span>
</span><span class='line'>xdebug.remote_host<span class="o">=</span><span class="s2">&quot;192.168.56.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A remarkable point of this configuration is that with <code>xdebug.remote_connect_back=0</code> we tell XDebug that we will provide the IP address where it has to send the debug info. XDebug looks for <code>REMOTE_ADDRESS</code> if we connect through HTTP but in our case we would have to configure it via PHP config (<code>xdebug.remote_host</code>) or in our console environment.</p>

<p>In this case, as I am using a Vagrant box, I configure the host IP directly. All petitions will come from here.</p>

<h2>Console&rsquo;s environment</h2>

<p>In one hand we have to configure a server name in the environment. Thus our IDE will look for the path mapping configuration of this server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PHP_IDE_CONFIG</span><span class="o">=</span><span class="s2">&quot;serverName=our-server.dev&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the other hand we have to tell XDebug to start debugging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">XDEBUG_CONFIG</span><span class="o">=</span><span class="s2">&quot;idekey=PHPSTORM&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Debug!</h2>

<p>To start debugging at this point is as simple as to set a breakpoint at our IDE and execute the script at the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>php our_script.php
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="http://xdebug.org/docs/remote">XDebug docs</a></li>
<li><a href="https://www.adayinthelifeof.nl/2012/12/20/debugging-remote-cli-with-phpstorm/">Debugging remote CLI with phpstorm</a></li>
<li><a href="http://stackoverflow.com/questions/16518262/xdebug-how-to-debug-remote-console-application">XDebug: how to debug remote console application? &ndash; StackOverflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Composer to a legacy code project]]></title>
    <link href="http://pedro.nofuent.es/blog/2014/03/20/adding-composer-to-a-legacy-code-project/"/>
    <updated>2014-03-20T23:26:12+01:00</updated>
    <id>http://pedro.nofuent.es/blog/2014/03/20/adding-composer-to-a-legacy-code-project</id>
    <content type="html"><![CDATA[<p>In a project of legacy code that I&rsquo;m working with we have the needing to use some external libraries in order to do some tasks. Also, we planned to refactor the code step by step to introduce good practices, reduce coupling, code duplication, etc.</p>

<p>At this point we had to implement a cron job to send users like a newsletter. This task was the perfect opportunity to create the basic scaffold using <a href="http://symfony.com/components">Symfony components</a> as it is isolated from the rest of the web application: we consume the data, but almost all the funcionality is new. Then, the first step was to introduce <a href="https://getcomposer.org/">Composer</a> to manage the vendor libraries and autoloading.</p>

<!-- more -->


<h2>Context</h2>

<p>Before we start, some points about the project:</p>

<ul>
<li>The project doesn&rsquo;t follow any naming or structure convention. It uses classes and namespacing, but as an example the class names are lowercase and variable names are uppercase.</li>
<li>The code has an autoloading function, but the intention is to replace it with Composer&rsquo;s autoloading.</li>
<li>There are some libraries included in the folder structure.</li>
<li>There are some files with functions defined between class files.</li>
</ul>


<p>The project has this folder structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>|____core
</span><span class='line'>|____imagenes
</span><span class='line'>|____modulos
</span><span class='line'>|____objetos
</span></code></pre></td></tr></table></div></figure>


<p>The folders containing classes are <code>core</code> and <code>modulos</code>, the other ones contain assets such images, javascript or templates.</p>

<h2>Goal</h2>

<p>The goal is to configure Composer to:</p>

<ul>
<li>Handle the autoloading of existing code.</li>
<li>Handle the autoloading of new code following <a href="http://www.php-fig.org/">PHP-FIG</a> standards.</li>
<li>Include files with functions.</li>
<li>Handle vendor libraries.</li>
</ul>


<p>Then we decided to add the known <code>vendor</code> folder and <code>src</code> for the new code.</p>

<h2>Configuring Composer</h2>

<h3>Autoloading</h3>

<p>The first step was configure autoloading. Insted the existing code naming is weird, it respects a class per file and the folder structure corresponding with the namespace, thus we can say that &ldquo;follows&rdquo; the <a href="http://www.php-fig.org/psr/psr-0/">PSR-0</a> for autoloading. For the new code we will follow the <a href="http://www.php-fig.org/psr/psr-4/">PSR-4</a>. Then we can configure autoloading like this:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;psr-4&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Acme\\&quot;</span><span class="p">:</span> <span class="s2">&quot;src/&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;psr-0&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;&quot;</span><span class="p">:</span> <span class="s2">&quot;./&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Previous existing libraries</h3>

<p>At this point we have some existing libraries included in the code without namespace. Then we have to configure Composer to include them using the <a href="https://getcomposer.org/doc/04-schema.md#classmap"><code>classmap</code> references</a>.</p>

<p>For example we are using the <a href="http://www.tcpdf.org">TCPDF</a> library and is stored in <code>core/app/libs</code>:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;classmap&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;core/app/libs/tcpdf.php&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Files with functions</h3>

<p>Finally to include individual files in the project we use the <a href="https://getcomposer.org/doc/04-schema.md#files">files autoloading</a> implemented. For example, we have <code>modulos/sistema/funciones.php</code> that we want to include automatically:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;files&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;modulos/sistema/funciones.php&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un vistazo a Xdebug]]></title>
    <link href="http://pedro.nofuent.es/blog/2013/10/11/un-vistazo-a-xdebug/"/>
    <updated>2013-10-11T17:15:00+02:00</updated>
    <id>http://pedro.nofuent.es/blog/2013/10/11/un-vistazo-a-xdebug</id>
    <content type="html"><![CDATA[<p>El pasado viernes 4 de octubre estuve en la reunión mensual de <a href="https://twitter.com/Symfony_VLC">@Symfony_VLC</a> dando una charla sobre Xdebug. No es que sea un <em>ninja</em>, pero es una herramienta que me facilita bastante algunas cosas del trabajo diario.</p>

<!-- more -->


<p>Una de las cosas para las que viene bien es que te obliga a indagar un poco más, sea repasándote la documentación o viendo algunos posts.</p>

<p>Para la preparación de la charla encontré algunos enlaces que me parecen interesantes (aparte de la <a href="http://xdebug.org/docs/">documentación</a>):</p>

<ul>
<li> <a href="http://devincharge.com/debug-cli-remote-server/">Debug PHP CLI on Remote Server with Xdebug and PHPStorm</a></li>
<li> <a href="http://mark-story.com/posts/view/remote-debugging-with-vim-and-xdebug">Remote debugging with vim and xdebug</a></li>
<li> <a href="https://github.com/joonty/vdebug">Vdebug</a></li>
</ul>


<p>En la charla mostré un pequeño ejemplo de cómo configurar Xdebug con PHPStorm en un servidor de <a href="https://github.com/pedronofuentes/symfonyvalencia-vagrant">desarrollo montado sobre Vagrant</a>. Al archivo de configuración de Puppet del repositorio hay que añadirle la configuración de la IP del host remoto:</p>

<figure class='code'><figcaption><span>maifests/default.pp</span><a href='https://github.com/pedronofuentes/symfonyvalencia-vagrant/blob/master/manifests/default.pp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puphpet::ini { 'xdebug':
</span><span class='line'>     value =&gt; [
</span><span class='line'>          …
</span><span class='line'>          'debug.remote_host = 192.168.56.1',
</span><span class='line'>          …
</span><span class='line'>     ],
</span><span class='line'>     ini     =&gt; '/etc/php5/conf.d/zzz_xdebug.ini',
</span><span class='line'>     notify     =&gt; Service['apache'],
</span><span class='line'>     require      =&gt; Class['php'],
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>&mdash;</p>

<script async class="speakerdeck-embed" data-id="813b5e50140601318e8326b064201532" data-ratio="1.33333333333333" src="http://pedro.nofuent.es//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's alive!!!]]></title>
    <link href="http://pedro.nofuent.es/blog/2013/09/27/it-s-alive/"/>
    <updated>2013-09-27T11:15:00+02:00</updated>
    <id>http://pedro.nofuent.es/blog/2013/09/27/it-s-alive</id>
    <content type="html"><![CDATA[<p>After much time thinking about writing a blog, finally it&rsquo;s alive! As it&rsquo;s my personal blog I will write about stuff that interests me :) Concretely I want to write about coding, problems that I find, tips and the big amount of stuff that I would learn.</p>

<p>My main development stack is PHP, Javascript, HTML, CSS, LESS… but I love to try new languages, tools, ways to solve problems, etc.</p>

<p>This is because I built the blog with <a href="http://octopress.org">Octopress</a>. I based my theme in the classic theme and used <a href="http://foundation.zurb.com">Foundation</a> as a bootstrap. I called <a href="https://github.com/pedronofuentes/octozurb">Octozurb</a> (I know, it isn&rsquo;t quite original) and if you want fork it, but please, let me learn from your improvements.</p>
]]></content>
  </entry>
  
</feed>
